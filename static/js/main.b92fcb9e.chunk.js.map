{"version":3,"sources":["pages/Home.jsx","pages/NotFound.jsx","pages/Resume.jsx","pages/Main.jsx","store/modules/counter.js","store/modules/index.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","NotFound","Resume","Main","react_router","exact","path","component","Component","handleActions","createAction","_handleActions","Object","defineProperty","state","action","number","_ref","combineReducers","counter","store","devTools","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","modules","App","es","react_router_dom","basename","pages_Main","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAMeA,EAJF,WACX,OAAOC,EAAAC,EAAAC,cAAA,sBCGMC,EAJE,WACf,OAAOH,EAAAC,EAAAC,cAAA,+BCOME,EARA,WACb,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBCWSG,mLAVX,OACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjCC,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWL,IACjCJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAOG,UAAWN,YANPO,6CCaJC,GAVUC,YAJP,qBAKOA,YAJP,qBAaHD,aAAaE,EAAA,GAAAC,OAAAC,EAAA,EAAAD,CAAAD,EAdV,oBAgBD,SAACG,EAAOC,GACnB,MAAO,CAAEC,OAAQF,EAAME,OAAS,KAHVJ,OAAAC,EAAA,EAAAD,CAAAD,EAbV,oBAoBD,SAAAM,GAAA,MAAiB,CAAED,OAAnBC,EAAGD,OAAiC,KAPzBL,GANP,CACnBK,OAAQ,KCTKE,cAAgB,CAC7BC,YCQaC,EATD,WACZ,IAAMC,EACJC,OAAOC,8BACPD,OAAOC,+BACHH,EAAQI,YAAYC,EAASJ,GAEnC,OAAOD,GCUMM,0LAVX,OACE5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAUP,MAAOA,KACftB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAYC,SAAU,KACpB/B,EAAAC,EAAAC,cAAC8B,EAAD,eALQtB,cCGEuB,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b92fcb9e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Home = () => {\n  return <div> Home </div>;\n};\n\nexport default Home;\n","import React from 'react';\n\nconst NotFound = () => {\n  return <div> 404 not found </div>;\n};\n\nexport default NotFound;\n","import React from 'react';\n\nconst Resume = () => {\n  return (\n    <div>\n      <h2> Resume </h2>\n    </div>\n  );\n};\n\nexport default Resume;\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Home, NotFound, Resume } from 'pages';\n\nclass Main extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/resume\" component={Resume} />\n        <Route component={NotFound} />\n      </Switch>\n    );\n  }\n}\n\nexport default Main;\n","import { createAction, handleActions } from 'redux-actions';\n\n// 액션 타입을 정의해줍니다.\nconst INCREMENT = 'counter/INCREMENT';\nconst DECREMENT = 'counter/DECREMENT';\n\n// 액션 생성 함수를 만듭니다.\nexport const increment = createAction(INCREMENT);\nexport const decrement = createAction(DECREMENT);\n\n// 모듈의 초기 상태를 정의합니다.\nconst initialState = {\n  number: 0,\n};\n\n// handleActions 의 첫번째 파라미터는 액션을 처리하는 함수들로 이뤄진 객체이고\n// 두번째 파라미터는 초기 상태입니다.\nexport default handleActions(\n  {\n    [INCREMENT]: (state, action) => {\n      return { number: state.number + 1 };\n    },\n    // action 객체를 참조하지 않으니까 이렇게 생략을 할 수도 있겠죠?\n    // state 부분에서 비구조화 할당도 해주어서 코드를 더욱 간소화시켰습니다.\n    [DECREMENT]: ({ number }) => ({ number: number - 1 }),\n  },\n  initialState,\n);\n","import { combineReducers } from 'redux';\nimport counter from './counter';\n\nexport default combineReducers({\n  counter,\n});\n","import { createStore } from 'redux';\nimport modules from './modules';\n\nconst store = () => {\n  const devTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n  const store = createStore(modules, devTools);\n\n  return store;\n};\n\nexport default store;\n","import React, { Component } from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport Main from 'pages/Main';\nimport store from 'store';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store()}>\n        <HashRouter basename={'/'}>\n          <Main />\n        </HashRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}